Python standard library

working with Paths

working with directories

working with files

working with Zip files

working with CSV files

working with JSON files

working with a SQLite database

working with Timestamps

working with DateTimes

working with Time Deltas

generating random values

opening the browser

sending emails

templates

command-line arguments

running external programs

/* --------

Python standard library

	Python has a batteries included
	philosophy

	so it has a comprehensive list
	of modules

	that provide common features you
	need

	so will learn most commonly
	used built-in



working with Paths

	from pathlib import Path


	# pathlib is the module,
	# Path is the class

	# windows
	Path("C:\\Program Files\\Microsoft")

	with a long path,
	the backslashes get messy

	# so simplify with a raw string
	# so that \ isn't an escape character

	so it'll be taken literally as is

	# so now it's a raw string
	Path(r"C:\Program Files\Microsoft")


	# on mac
	Path("/usr/local/bin")


	# so this object represents the
	# current folder
	Path()


	Path("ecommerce/__init__.py")


	# can also combine path objects together using /

	Path() / Path("ecommerce")


	or

	Path() / "ecommerce" / "__init__.py"


	to get the home directory
	of the user

	Path.home()


	---




working with directories

working with files

	from pathlib import Path

	path = Path("ecommerce/__init__.py")

	# check if file exist
	path.exit()
	path.rename("init.txt")
	path.unlink() # delete file
	path.stat() # returns info about the file, time values, size, ect

	# for human readable time

	from time import ctime

	print(ctime(path.stat().st_ctime))


	# for reading data from a file

	path.read_bytes

	# reads content as a string
	print( path.read_text() )


	# using the above function
	# is easier than the built-in open
	# function


	with open

		# to need pass in the mode
		# as 2nd arg

		# must be user to close it

	file = open("__init__.py", "r")

	file.close()


	# for best practice use the 'with'
	# statement which will close it for you


	with open("__init__.py", ) as file:
		# work with file object


		# note that these two
		# methods below take care
		# of opening and closing
		# the file
	path.writeText("text data")
	path.write_bytes()

	# this path object is not the
	# ideal way to copy a file


	to copy the file to a different
	location

	source = Path("ecommerce/__init__.py")

	target = Path() / "__init__.py"

	# now to copy the file
	# read the contents of the source

	target.write_text(source.read_text())


	# this is a bit tedious,
	# there's a better way
	# ...



	there's a module called
	shutil
	// or shell utilities

	it provides some high level
	operations

	for copying and moving
	files and directories


		import shutil

		source = Path("ecommerce/__init__.py")

		target = Path() / "__init__.py"

		shutil.copy(source, target)






working with Zip files

working with CSV files

working with JSON files

working with a SQLite database

working with Timestamps

working with DateTimes

working with Time Deltas

generating random values

opening the browser

sending emails

	How to send emails in Python,

	this is useful if you have a database of Customers and you want to send emails based on 
	their interests.

	so import some classes,
	and the other to connect to an SMTP server for sending emails 


	from email.mime.multipart import MIMEMultipart 

	// email package
	// within subpackage mime 

	// Multi-Purpose Intermet Mail Extentions
	// this is the standard that defines the format for email messages 

	// here is a subpackage, multipart 
	// that exposes a class, MIMEMultipart

	// with that object, you can send an Email message that includes 
	// both HTML and plain text content 

	So it can render HTML content or plain text content 

	---
	---
	from email.mime.multipart import MIMEMultipart 
	from email.mime.text import MIMEText
	import smtplib 

	message = MIMEMultipart()
	// set various headers 

	message["from"] = "Steven Garcia"
	message["to"] = "testuser@codewithmosh.com"
	message["subject"] = "This is a test"

	// to set the body, you need to attach it to this message 
	// attach() has a arg for the payload,
	// which could be text, an image, or other resources supported by the MIME protocol 
	message.attach(MIMEText("Body"))

	// pass two keyword arguments
	// so the values we set here depend on the SMTP server that you use 

	// this returns an SMTP object
	smtp = smtplib.SMTP(host="smtp.gmail.com", port=587)

	// be sure to close it, to release that resource 
	smtp.close()


	// or could do 

	with smtplib.SMTP(host="smtp.gmail.com", port=587) as smtp 
		smtp.ehlo()
		smtp.starttls()
		smtp.login("testuser@codewithmosh.com", "password123")
		smtp.send_message(message)
		print("Sent...")

	--
	then some steps to follow before sending an email 

	ehlo is hello, greeting to the SMTP server,
	we are telling the SMTP server,
	"hey I'm a client and I want to send an email"

	this is part of SMTP protocol 

	communciation between client and SMTP server,

	so .starttls()
	puts SMPT connection 
	in tls mode 

	tls stands for transport layer security 

	with this,
	all the commands that we sent to the SMTP server 
	will be encrypted 

	now ready to login


	if you want to send HTML content, pass actual html 
	
		message.attach(MIMEText("<h1>Hello World</h1", "html")



	BE sure to handle exceptions by wrapping everything in a try - catch block 

	-
	To attach an image 


	from email.mime.image import MIMEImage
	// have image in the same directory for example 

	from pathlib import Path
	// need to pass an image object in binary 
	// so need our Path class 

	message.attach(MIMEImage(Path("mosh.png").read_bytes()))




templates

command-line arguments

running external programs
